# Ignora o diretório .vscode, que é onde o Visual Studio Code armazena configurações específicas do projeto.
.vscode

# Ignora arquivos Python compilados, que são criados automaticamente quando você executa um programa Python.
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Ignora arquivos de extensão compartilhada, que são bibliotecas compiladas que podem ser carregadas por vários programas.
# C extensions
*.so

# Ignora vários arquivos e diretórios relacionados à distribuição e empacotamento de projetos Python.
# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Ignora arquivos relacionados ao PyInstaller, uma ferramenta para criar executáveis a partir de scripts Python.
# PyInstaller
# Usually these files are written by a python script from a template
# before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec
data

# Ignora arquivos de log criados pelo pip, o gerenciador de pacotes Python.
# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Ignora arquivos e diretórios relacionados a testes e relatórios de cobertura.
# Unit test / coverage reports
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
test

# Ignora arquivos de tradução
# Translations
*.mo
*.pot

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
#.pdm.toml

# Ignora diretórios de ambiente virtual, que são usados para isolar as dependências do projeto.
# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/